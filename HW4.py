# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
#
from sys import argv


def salary(h, r, b):
    print(f"Ваша заработная плата: {(h * r) + b} руб.")


try:
    name, hrs, rate, bonus = argv
    salary(int(hrs), int(rate), int(bonus))
except ValueError:
    hrs = rate = 0
    print("Вы ввели неполные данные.")

# # 2. Представлен список чисел.
# # Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# # Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# # Для формирования списка использовать генератор.
# # Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# # Результат: [12, 44, 4, 10, 78, 123].

import random
my_list = [random.randint(0, 100) for i in range(15)]
print(f"Исходный список: {my_list}")
list2 = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i-1]]
print(f"Результат: {list(list2)}")

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

numbers = [print(i) for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

import random
list1 = [i * j for i in range(5, 10) for j in range(1, 5)]
print(f"Исходный список: {list1}")
list2 = [a for a in list1 if list1.count(a) == 1]
print(f"Уникальные числа: {list2}")

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
import random


def simple(a, b):
    return a * b


my_list = [i for i in range(100, 1000) if i % 2 == 0]
print(my_list)
print(reduce(simple, my_list))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
#  не использовать break

from itertools import count
from itertools import cycle


my_count = count(7)
for _ in range(7):
    print("Результат: ({})".format(next(my_count)))

my_cycle = cycle(['Hi', False, 14])
for _ in range(10):
    print("Результат: {}".format(next(my_cycle)))

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только
# первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. - модуль math, функция factorial(N)
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def factorial(n):
    first = 1
    if n == 0:
        yield f"{n}! = 1"
    for i in range(1, n + 1):
        first *= i
        yield f'{i}! = {first}'


for m in factorial(int(input("Введите число: "))):
    print(m)
